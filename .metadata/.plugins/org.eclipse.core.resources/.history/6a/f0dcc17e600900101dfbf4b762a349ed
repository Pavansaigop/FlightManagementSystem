package com.bookingservice.controllerTest;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import com.bookingservice.Exception.BookingHandlingException;
import com.bookingservice.Exception.BookingsNotFoundException;
import com.bookingservice.Exception.FlightNotFoundException;
import com.bookingservice.controller.BookingController;
import com.bookingservice.model.Booking;
import com.bookingservice.model.PassengerDetails;
import com.bookingservice.service.BookingService;

@SpringBootTest
@ExtendWith(MockitoExtension.class)
public class BookingControllerTest {
	
	@Mock
	private BookingService bookingService;
	
	@InjectMocks
	private BookingController bookingController;
	
	private Booking booking;
	private PassengerDetails passenger;
	
	@BeforeEach
	void setUp() {
		PassengerDetails passenger1 = new PassengerDetails("Pavan", "Male", 22, null);
        PassengerDetails passenger2 = new PassengerDetails("Sai Gopal", "Female", 22, null);
        List<PassengerDetails> passengers = Arrays.asList(passenger1, passenger2);
        
        booking = new Booking("AIR-100", 1, 2, LocalDateTime.now(), "Scheduled", passengers);
	}
	
	
	@Test
void testAddBooking() throws BookingsNotFoundException, BookingHandlingException, FlightNotFoundException {
	when(bookingService.addBooking("AIR-100","Economy", 50, booking)).thenReturn(1);
	
    ResponseEntity<String> response =bookingController.addBooking("AIR-100", "Economy", 50, booking);

	assertEquals("Booking Succesful", response.getBody());
	
}
	@Test
	void testDeleteBooking() throws BookingHandlingException {
		when(bookingService.deleteBookingByBookingId(2)).thenReturn(1);
		
	    ResponseEntity<String> response =bookingController.deleteBooking(2);
	    
	    assertEquals("Deleted", response.getBody());

	}
	
	@Test
	void testgetBookingByPassengerId() throws BookingsNotFoundException {
		when(bookingService.getBookingByPassengerBookingId(12106941)).thenReturn(Arrays.asList(booking));
		
		ResponseEntity<List<Booking>> bookings = bookingController.getBookings(12106941);
	    assertEquals(HttpStatus.OK, bookings.getStatusCode()); // Verify status is OK
		assertEquals(bookings, bookings);
		verify(bookingService, times(1)).getBookingByPassengerBookingId(12106941);
	}
	
	

}
